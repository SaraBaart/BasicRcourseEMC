# Function environments and scoping

Each function, whether built-in or user-defined, has an associated environment, which can be thought of as a container that holds all of the objects present at the time the function is created.

### The Top-Level (or Global) Environment

When a function is created on the command line, it's environment is the so-called "Global Environment":

```{r}
w <- 2
f <- function(y) {
  d <- 3
  return(d * (w + y))
}
environment(f)
```

The function `objects()` (or `ls()`), when called from the command line, lists the objects in the Global Environment:

```{r}
objects()
```

### Global and Local Variables

In the function `f()` defined above, the variable `w` is said to be global to `f()` and the variable `d`, because it's created within `f()`, is said to be local to `f()`. Global variables (like `w`) are visible from within a function, but local variables (like `d`) aren't visible from outside the function. In fact, local variables are temporary, and disappear when the function call is completed:

```{r, eval=FALSE}
f(y = 1)
d
```

You get an error: [Error in eval(expr, envir, enclos) : object 'd' not found]{style="color: red"}, indicating that the variable d does not exist in the 'Global Environment'.

When a global and local variable share the same name, the local variable is used:

```{r}
w <- 2
d <- 4

f <- function(y) {
  d <- 3
  return(d * (w + y))
}

f(y = 1)
```

Note also that when an assignment takes place within a function, and the local variable shares its name with an existing global variable, only the local variable is affected:

```{r}
w <- 2
d <- 4 # This value of d will remain unchanged.

f <- function(y) {
  d <- 3 # This doesnt affect the value of d in the global environment
  return(d * (w + y))
}

f(y = 1)

d
```

### Nested Functions and the Scope Hierarchy

For user-defined functions created on the command line, the global variables for that function are those in the global environment. They're listed by typing `ls()` (or `objects()`) on the command line. When a function is created inside another function, its global variables are the local variables of the outer function plus the outer function's global variables. Regardless of whether a function is created on the command line or inside another function, its local variables are the variables created inside of it plus its formal arguments to which values have been passed

For example:

```{r}
w <- 2 # w is global to f() and therefore also to h()
f <- function(y) {
  d <- 3
  h <- function() {
    b <- 5 # b is local to h()
    return(d * (w + y))
  }
  return(h())
}
```

Above,

-   `w` is a global environment variable to `f()` and also to `h()`

-   `y` and `d` are local variables to `f()`, but "global" to `h()`

-   `b` is local to `h()`

This scope hierarchy continues when multiple function definitions are nested inside of each other.

We can use a `print(ls())` statement to see which objects are local to `f()`:

```{r}
w <- 2 # w is global to f() and therefore also to h()
f <- function(y) {
  d <- 3 # y and d are local to f() but global to h()
  h <- function() {
    b <- 5 # b is local to h()
    return(d * (w + y))
  }
  print(ls())
  return(h())
}

f(y = 2)
```

Note that `b` is not printed, as it is local to `h()`, but not to `f()`.

Likewise we can use a `print(environment(h))` statement to view the environment of `h()`:

```{r}
w <- 2 # w is global to f() and therefore also to h()
f <- function(y) {
  d <- 3 # y and d are local to f() but global to h()
  h <- function() {
    b <- 5 # b is local to h()
    return(d * (w + y))
  }
  print(environment(h))
  return(h())
}
f(y = 2)
```

In the output above, the environment of `h()` is referred to by its memory location. The environment of `h()` is the "container" that contains `h()` as well as the objects `d` and `y`.
